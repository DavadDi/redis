Welcome to the Naive Disk Store.  It is an attempt to see if a really
stupidly-simple disk-backed store has any hope of working with Redis.  The
intended use case is for a redis instance that stores a lot of data, but
with a relatively small active set of keys.  

At the time of writing, NDS is implemented by persisting every change to a
key to a GDBM database.  When a key isn't found in memory, the GDBM database
is checked to see if the key exists.  The plan is that you can keep memory
usage of your redis instance under control by setting maxmemory (with an
allkeys-lru eviction policy, preferably) and as space is required, unused
keys get evicted from memory.  When they're needed again in the future,
however, they're available on disk.

There are one or two "side benefits" to using NDS.  They're not the reason
*why* it was written, but they're useful anyway.  Whether they're worth it
for your use-case is up to you.

* Very, very short "startup" time.  Instead of having to load a large RDB or
  AOF into memory, the redis instance can immediately start serving
  requests.  The performance will be poor until the popular keys are all
  in-memory, but often slow operation is better than no operation.

* Disk-efficient, real-time persistence.  Disk space usage isn't
  significantly more than an RDB file, and you never have to trigger a
  rewrite or a complete dump -- and yet, you still get up-to-date
  persistence.


DEPLOYING

Build with USE_NDS=yes:

    make USE_NDS=yes

The resulting redis-server binary will store all its data in your data
directory, in freezer.gdbm.

If you'd like to run up an NDS-enabled Redis instance from an existing RDB
(or AOF), that's pretty simple: just start up the NDS-enabled redis instance
with the AOF or RDB in the usual place.  This will take a long time (writing
all that data to GDBM takes a while), but once that's done you'll never have
to do it again.  You can now delete the AOF or RDB (and disable those
features).  From now on, when you start up, your data will come from the NDS
"freezer".


TODO

NDS is very new, and shouldn't be relied upon for anything really important. 
There are a number of things that need to be fixed before it is of any use
to anyone:

* Runtime configuration.  At the moment, to enable NDS you need to rebuild
  with a special flag enabled.  It'd be nice to be able to turn NDS on at
  runtime.  This shouldn't be spectacularly hard to do.

* Stats.  It'd be nice to get cache hit rates, read and write counts, and
  all that sort of good stuff out of redis.

* Keys lose their TTLs when they get stashed.  This presumably just involves
  modifying the data dumper/loader to include setting the TTL (as is done in
  full RDB files, probably).  I'll likely leave this for someone who uses
  TTLs on their keys.

* 'keys', at present, will only work on the keys that are in-memory, and
  will completely disavow all knowledge of all the keys that are *only* in
  the freezer.  Personally, I don't think this is a huge deal -- using
  'keys' is a great way to totally wedge your redis -- but it'll need fixing
  if anyone actually wants 'keys' to be useful.  I expect this'll 
