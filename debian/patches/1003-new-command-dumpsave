From 4d9aad1bdf367e9df8b443c05ca530fc7d970729 Mon Sep 17 00:00:00 2001
From: Saj Goonatilleke <sg@redu.cx>
Date: Wed, 6 Jun 2012 16:17:53 +1000
Subject: [PATCH 1003/1010] New command: DUMPSAVE

---
 src/db.c    |   8 ++++
 src/rdb.c   | 141 ++++++++++++++++++++++++++++++++++++++++--------------------
 src/rdb.h   |   2 +
 src/redis.c |   1 +
 src/redis.h |   1 +
 5 files changed, 107 insertions(+), 46 deletions(-)

diff --git a/src/db.c b/src/db.c
index c0d3eed..029bd91 100644
--- a/src/db.c
+++ b/src/db.c
@@ -330,6 +330,14 @@ void pipesaveCommand(redisClient *c) {
     }
 }
 
+void dumpsaveCommand(redisClient *c) {
+    if (rdbDumpsaveBackground(c->fd) == REDIS_OK) {
+        addReplyStatus(c,"Background dumpsave started");
+    } else {
+        addReply(c,shared.err);
+    }
+}
+
 void renameGenericCommand(redisClient *c, int nx) {
     robj *o;
     long long expire;
diff --git a/src/rdb.c b/src/rdb.c
index 0e8c60f..85734bb 100644
--- a/src/rdb.c
+++ b/src/rdb.c
@@ -597,18 +597,15 @@ int rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val,
     return 1;
 }
 
-/* Save the DB on disk. Return REDIS_ERR on error, REDIS_OK on success */
+/* Save the DB to a file.  If filename begins with a pipe (`|'), then 
+ * exec whatever program comes after it and write the DB to its stdin.
+ *
+ * Return REDIS_ERR on error, REDIS_OK on success. */
 int rdbSave(char *filename) {
-    dictIterator *di = NULL;
-    dictEntry *de;
-    char tmpfile[256];
-    char magic[10];
-    int j;
-    long long now = mstime();
     FILE *fp;
-    rio rdb;
-    uint64_t cksum;
+    char tmpfile[256];
 
+    /* Open */
     if (filename[0] == '|') {
 #ifdef HAVE_POPEN_MODE_E
         fp = popen(filename+1, "we");
@@ -629,6 +626,55 @@ int rdbSave(char *filename) {
         }
     }
 
+    /* Write */
+    if (rdbSaveToFileDescriptor(fp) == REDIS_ERR) {
+        if (filename[0] == '|') {
+            pclose(fp);
+            redisLog(REDIS_WARNING,"Write error saving DB to pipe: %s", strerror(errno));
+        } else {
+            fclose(fp);
+            unlink(tmpfile);
+            redisLog(REDIS_WARNING,"Write error saving DB on disk: %s", strerror(errno));
+        }
+        return REDIS_ERR;
+    }
+
+    /* Close */
+    if (filename[0] == '|') {
+        if (pclose(fp) < 0) {
+            redisLog(REDIS_WARNING, "Save to pipe failed: %s", strerror(errno));
+            return REDIS_ERR;
+        }
+        redisLog(REDIS_NOTICE,"DB saved to command '%s'", filename+1);
+    } else {
+        fclose(fp);
+
+        /* Use RENAME to make sure the DB file is changed atomically only
+         * if the generate DB file is ok. */
+        if (rename(tmpfile,filename) == -1) {
+            redisLog(REDIS_WARNING,"Error moving temp DB file on the final destination: %s", strerror(errno));
+            unlink(tmpfile);
+            return REDIS_ERR;
+        }
+        redisLog(REDIS_NOTICE,"DB saved on disk");
+    }
+    server.dirty = 0;
+    server.lastsave = time(NULL);
+    server.lastbgsave_status = REDIS_OK;
+    return REDIS_OK;
+}
+
+/* Save the DB to the given FILE pointer.  We are responsible neither 
+ * for opening nor closing the descriptor. */
+int rdbSaveToFileDescriptor(FILE *fp) {
+    dictIterator *di = NULL;
+    dictEntry *de;
+    char magic[10];
+    int j;
+    long long now = mstime();
+    rio rdb;
+    uint64_t cksum;
+
     rioInitWithFile(&rdb,fp);
     if (server.rdb_checksum)
         rdb.update_cksum = rioGenericUpdateChecksum;
@@ -641,11 +687,6 @@ int rdbSave(char *filename) {
         if (dictSize(d) == 0) continue;
         di = dictGetSafeIterator(d);
         if (!di) {
-            if (filename[0] == '|' ) {
-                pclose(fp);
-            } else {
-                fclose(fp);
-            }
             return REDIS_ERR;
         }
 
@@ -679,38 +720,9 @@ int rdbSave(char *filename) {
     /* Make sure data will not remain on the OS's output buffers */
     fflush(fp);
     fsync(fileno(fp));
-    if (filename[0] == '|') {
-        if (pclose(fp) < 0) {
-            redisLog(REDIS_WARNING, "Save to pipe failed: %s", strerror(errno));
-            return REDIS_ERR;
-        }
-        redisLog(REDIS_NOTICE,"DB saved to command '%s'", filename+1);
-    } else {
-        fclose(fp);
-
-        /* Use RENAME to make sure the DB file is changed atomically only
-         * if the generate DB file is ok. */
-        if (rename(tmpfile,filename) == -1) {
-            redisLog(REDIS_WARNING,"Error moving temp DB file on the final destination: %s", strerror(errno));
-            unlink(tmpfile);
-            return REDIS_ERR;
-        }
-        redisLog(REDIS_NOTICE,"DB saved on disk");
-    }
-    server.dirty = 0;
-    server.lastsave = time(NULL);
-    server.lastbgsave_status = REDIS_OK;
     return REDIS_OK;
 
 werr:
-    if (filename[0] == '|') {
-        pclose(fp);
-        redisLog(REDIS_WARNING,"Write error saving DB to pipe: %s", strerror(errno));
-    } else {
-        fclose(fp);
-        unlink(tmpfile);
-        redisLog(REDIS_WARNING,"Write error saving DB on disk: %s", strerror(errno));
-    }
     if (di) dictReleaseIterator(di);
     return REDIS_ERR;
 }
@@ -737,7 +749,7 @@ int rdbSaveBackground(char *filename) {
         server.stat_fork_time = ustime()-start;
         if (childpid == -1) {
             redisLog(REDIS_WARNING,"Can't save in background: fork: %s",
-                strerror(errno));
+                     strerror(errno));
             return REDIS_ERR;
         }
         redisLog(REDIS_NOTICE,"Background saving started by pid %d",childpid);
@@ -773,8 +785,8 @@ int rdbPipesaveBackground(char *command) {
     } else {
         /* Parent */
         if (childpid == -1) {
-            redisLog(REDIS_WARNING,"Can't pipesave in background: fork: %s",
-                strerror(errno));
+            redisLog(REDIS_WARNING,"Can't pipesave: fork: %s",
+                     strerror(errno));
             return REDIS_ERR;
         }
         redisLog(REDIS_NOTICE,"Background pipesave started by pid %d",childpid);
@@ -785,6 +797,43 @@ int rdbPipesaveBackground(char *command) {
     return REDIS_OK; /* unreached */
 }
 
+int rdbDumpsaveBackground(int fd) {
+    pid_t childpid;
+    FILE *fp;
+
+    if (server.rdb_child_pid != -1) return REDIS_ERR;
+
+    if ((childpid = fork()) == 0) {
+        int retval;
+
+        /* Child */
+        if (server.ipfd > 0) close(server.ipfd);
+        if (server.sofd > 0) close(server.sofd);
+        fp = fdopen(fd, "w");
+        if (!fp) {
+            redisLog(REDIS_WARNING, "Can't dumpsave: fdopen: %s",
+                     strerror(errno));
+            exitFromChild(1);
+        }
+        retval = rdbSaveToFileDescriptor(fp);
+        exitFromChild((retval == REDIS_OK) ? 0 : 1);
+    } else {
+        /* Parent */
+        if (childpid == -1) {
+            redisLog(REDIS_WARNING,"Can't dumpsave: fork: %s",
+                     strerror(errno));
+            return REDIS_ERR;
+        }
+        aeDeleteFileEvent(server.el,fd,AE_READABLE);
+        close(fd);
+        redisLog(REDIS_NOTICE,"Background dumpsave started by pid %d",childpid);
+        server.rdb_child_pid = childpid;
+        updateDictResizePolicy();
+        return REDIS_OK;
+    }
+    return REDIS_OK; /* unreached */
+}
+
 void rdbRemoveTempFile(pid_t childpid) {
     char tmpfile[256];
 
diff --git a/src/rdb.h b/src/rdb.h
index 78476e2..eb18f11 100644
--- a/src/rdb.h
+++ b/src/rdb.h
@@ -76,8 +76,10 @@ int rdbLoadObjectType(rio *rdb);
 int rdbLoad(char *filename);
 int rdbSaveBackground(char *filename);
 int rdbPipesaveBackground(char *command);
+int rdbDumpsaveBackground(int fd);
 void rdbRemoveTempFile(pid_t childpid);
 int rdbSave(char *filename);
+int rdbSaveToFileDescriptor(FILE *file);
 int rdbSaveObject(rio *rdb, robj *o);
 off_t rdbSavedObjectLen(robj *o);
 off_t rdbSavedObjectPages(robj *o);
diff --git a/src/redis.c b/src/redis.c
index 99e167f..164db46 100644
--- a/src/redis.c
+++ b/src/redis.c
@@ -207,6 +207,7 @@ struct redisCommand redisCommandTable[] = {
     {"echo",echoCommand,2,"r",0,NULL,0,0,0,0,0},
     {"save",saveCommand,1,"ars",0,NULL,0,0,0,0,0},
     {"pipesave",pipesaveCommand,1,"ars",0,NULL,0,0,0,0,0},
+    {"dumpsave",dumpsaveCommand,1,"ars",0,NULL,0,0,0,0,0},
     {"bgsave",bgsaveCommand,1,"ar",0,NULL,0,0,0,0,0},
     {"bgrewriteaof",bgrewriteaofCommand,1,"ar",0,NULL,0,0,0,0,0},
     {"shutdown",shutdownCommand,-1,"ar",0,NULL,0,0,0,0,0},
diff --git a/src/redis.h b/src/redis.h
index 0e1c504..b0b10d8 100644
--- a/src/redis.h
+++ b/src/redis.h
@@ -1004,6 +1004,7 @@ void saveCommand(redisClient *c);
 void bgsaveCommand(redisClient *c);
 void bgrewriteaofCommand(redisClient *c);
 void pipesaveCommand(redisClient *c);
+void dumpsaveCommand(redisClient *c);
 void shutdownCommand(redisClient *c);
 void moveCommand(redisClient *c);
 void renameCommand(redisClient *c);
-- 
1.7.11.1

